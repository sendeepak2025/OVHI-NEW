// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Int      @default(6) // 6 = provider
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Provider specific fields
  provider Provider?

  @@map("users")
}

model Provider {
  id           String  @id @default(cuid())
  userId       String  @unique
  name         String
  role         String
  specialty    String
  color        String
  availability Json    // Store weekly availability schedule
  isActive     Boolean @default(true)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("providers")
}

model Location {
  id       String  @id @default(cuid())
  name     String
  address  String
  phone    String
  capacity Int     @default(10)
  color    String
  isActive Boolean @default(true)

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Patient {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  dateOfBirth DateTime?

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model Appointment {
  id         String            @id @default(cuid())
  patientId  String
  providerId String
  locationId String
  date       DateTime
  duration   String            // "30 minutes", "45 minutes", etc.
  type       AppointmentType
  status     AppointmentStatus @default(PENDING)
  notes      String?
  hasBilling Boolean           @default(false)

  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

enum AppointmentType {
  TELEHEALTH
  IN_PERSON
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  resourceId String?
  userId    String?
  details   Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}